{"version":3,"sources":["types.ts","components/TodoItem.tsx","components/TodosContext.tsx","hooks/useLocalStorage.ts","components/TodoList.tsx","components/TodosFilter.tsx","TodoApp.tsx","App.tsx","index.tsx"],"names":["filterValues","edit","TodosContext","React","createContext","todos","setTodos","visibleTodos","setVisibleTodos","filterBy","All","setFilterBy","TodosProvider","children","initialValue","key","useState","storage","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","useLocalStorage","contextValue","Provider","TodoItem","memo","todo","editClass","setEditClass","editTodoId","setEditTodoId","newTitle","setNewTitle","useContext","replaceTitle","targetElement","find","el","id","length","title","className","classNames","completed","type","checked","onChange","map","onDoubleClick","Editing","onClick","filter","ref","input","focus","event","target","trim","onKeyDown","onBlur","TodoList","isChecked","htmlFor","hidden","Active","Completed","filterTodos","Fragment","TodosFilter","filterHandler","preventDefault","currentTarget","textContent","count","counter","href","selected","TodoApp","addNewTodo","newtodo","Date","onSubmit","placeholder","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb0548b3.chunk.js","sourcesContent":["export interface Todo {\n  id: number,\n  title: string,\n  completed: boolean,\n}\n\nexport enum filterValues {\n  All = 'All',\n  Active = 'Active',\n  Completed = 'Completed',\n}\n","import React, { useState, useContext } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../types';\nimport { TodosContext } from './TodosContext';\n\ntype Props = {\n  todo: Todo,\n}\n\nenum edit {\n  Editing = 'editing',\n}\n\nexport const TodoItem: React.FC<Props> = React.memo(({ todo }) => {\n  const [editClass, setEditClass] = useState('');\n  const [editTodoId, setEditTodoId] = useState('');\n  const [newTitle, setNewTitle] = useState('');\n  const { todos, setTodos } = useContext(TodosContext);\n\n  const toggleHandler = (id: number) => {\n    setTodos(todos.map((el) => {\n      if (el.id === id) {\n        return {\n          ...el,\n          completed: !el.completed,\n        };\n      }\n\n      return el;\n    }));\n  };\n\n  const removeTodo = (id: number) => {\n    setTodos(todos.filter(el => el.id !== id));\n  };\n\n  const editTodo = () => {\n    setNewTitle(todo.title);\n    setEditClass(edit.Editing);\n    setEditTodoId('editTodo');\n  };\n\n  const replaceTitle = () => {\n    const targetElement = todos.find(el => el.id === todo.id);\n\n    if (targetElement && newTitle.length > 0) {\n      targetElement.title = newTitle;\n    }\n  };\n\n  const saveNewTitle = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      replaceTitle();\n      setEditClass('');\n    }\n\n    if (event.key === 'Escape') {\n      setEditClass('');\n    }\n  };\n\n  const onblurHandler = () => {\n    replaceTitle();\n    setEditClass('');\n  };\n\n  return (\n    <li\n      className={classNames(\n        { completed: todo.completed },\n        editClass,\n      )}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id=\"toggle-view\"\n          checked={todo.completed}\n          onChange={() => toggleHandler(todo.id)}\n        />\n\n        <label\n          onDoubleClick={editTodo}\n          className=\"label\"\n        >\n          {todo.title}\n        </label>\n\n        <button\n          data-cy=\"deleteTodo\"\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => removeTodo(todo.id)}\n        />\n      </div>\n      <input\n        id={editTodoId}\n        type=\"text\"\n        className=\"edit\"\n        ref={input => input && input.focus()}\n        value={newTitle}\n        onChange={event => setNewTitle(event.target.value.trim())}\n        onKeyDown={saveNewTitle}\n        onBlur={onblurHandler}\n      />\n    </li>\n  );\n});\n","import React, { useState } from 'react';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { Todo, filterValues } from '../types';\n\ntype ContextProps = {\n  todos: Todo[],\n  setTodos: (items: Todo[]) => void,\n  visibleTodos: Todo[],\n  setVisibleTodos: (items: Todo[]) => void,\n  filterBy: string,\n  setFilterBy: (value: string) => void,\n}\n\nexport const TodosContext = React.createContext<ContextProps>({\n  todos: [],\n  setTodos: () => {},\n  visibleTodos: [],\n  setVisibleTodos: () => {},\n  filterBy: filterValues.All,\n  setFilterBy: () => {},\n});\n\nexport const TodosProvider: React.FC = ({ children }) => {\n  const [todos, setTodos] = useLocalStorage([], 'todos');\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const [filterBy, setFilterBy] = useState('All');\n\n  const contextValue = {\n    todos,\n    setTodos,\n    visibleTodos,\n    setVisibleTodos,\n    filterBy,\n    setFilterBy,\n  };\n\n  return (\n    <TodosContext.Provider value={contextValue}>\n      {children}\n    </TodosContext.Provider>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { Todo } from '../types';\n\nexport const useLocalStorage = (initialValue: Todo[], key: string) => {\n  const getValue = () => {\n    const storage = localStorage.getItem(key);\n\n    if (storage) {\n      return JSON.parse(storage);\n    }\n\n    return initialValue;\n  };\n\n  const [value, setValue] = useState(getValue);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [value]);\n\n  return [value, setValue];\n};\n","import React, { useContext } from 'react';\n\nimport { Todo, filterValues } from '../types';\nimport { TodoItem } from './TodoItem';\nimport { TodosContext } from './TodosContext';\n\nexport const TodoList: React.FC = React.memo(() => {\n  const { todos, setTodos } = useContext(TodosContext);\n  const { filterBy } = useContext(TodosContext);\n\n  const toggleAll = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTodos(todos.map(todo => ({\n      ...todo,\n      completed: event.target.checked,\n    })));\n  };\n\n  const filterTodos = (value: string) => {\n    switch (value) {\n      case filterValues.Active:\n        return todos.filter(todo => !todo.completed);\n\n      case filterValues.Completed:\n        return todos.filter(todo => todo.completed);\n\n      default:\n        return todos;\n    }\n  };\n\n  const isChecked = todos.filter(todo => !todo.completed).length === 0;\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        data-cy=\"toggleAll\"\n        checked={isChecked}\n        onChange={toggleAll}\n      />\n      <label\n        htmlFor=\"toggle-all\"\n        hidden={todos.length === 0}\n      >\n        Mark all as complete\n      </label>\n\n      <ul\n        className=\"todo-list\"\n        data-cy=\"todoList\"\n      >\n        {filterTodos(filterBy).map((todo: Todo) => (\n          <React.Fragment key={todo.id}>\n            <TodoItem todo={todo} />\n          </React.Fragment>\n        ))}\n      </ul>\n    </section>\n  );\n});\n","import classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport { TodosContext } from './TodosContext';\n\nexport const TodosFilter: React.FC = React.memo(() => {\n  const { todos, setTodos } = useContext(TodosContext);\n  const { filterBy, setFilterBy } = useContext(TodosContext);\n\n  const counter = () => {\n    const count = todos.filter(todo => !todo.completed).length;\n\n    if (count === 1) {\n      return `${count} item left`;\n    }\n\n    return `${count} items left`;\n  };\n\n  const counterCompleted = () => todos.filter(todo => todo.completed).length;\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  const filterHandler = (\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n    setFilterBy(event.currentTarget.textContent || 'All');\n  };\n\n  return (\n    <>\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <span\n            className=\"todo-count\"\n            data-cy=\"todosCounter\"\n          >\n            {counter()}\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a\n                href=\"#/\"\n                className={classNames({ selected: filterBy === 'All' })}\n                onClick={filterHandler}\n              >\n                All\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/active\"\n                className={classNames({ selected: filterBy === 'Active' })}\n                onClick={filterHandler}\n              >\n                Active\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/completed\"\n                className={classNames({ selected: filterBy === 'Completed' })}\n                onClick={filterHandler}\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n\n          {counterCompleted() > 0 && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={clearCompleted}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </>\n  );\n});\n","import React, { useContext, useState } from 'react';\nimport { TodosContext } from './components/TodosContext';\n\nexport const TodoApp: React.FC = () => {\n  const [newTitle, setNewTitle] = useState('');\n  const { todos, setTodos } = useContext(TodosContext);\n\n  const addNewTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!newTitle) {\n      return;\n    }\n\n    const newtodo = {\n      id: +new Date(),\n      title: newTitle,\n      completed: false,\n    };\n\n    setTodos([...todos, newtodo]);\n\n    setNewTitle('');\n  };\n\n  return (\n    <form\n      onSubmit={addNewTodo}\n      onBlur={addNewTodo}\n    >\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        data-cy=\"createTodo\"\n        value={newTitle}\n        onChange={(event => setNewTitle(event.target.value.trim()))}\n      />\n    </form>\n  );\n};\n","import React from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\nimport { TodosProvider } from './components/TodosContext';\nimport { TodoApp } from './TodoApp';\n\nconst App: React.FC = () => (\n  <TodosProvider>\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <TodoApp />\n      </header>\n\n      <section className=\"main\">\n        <TodoList />\n      </section>\n\n      <TodosFilter />\n    </section>\n  </TodosProvider>\n);\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}